
- project:
    name: jnk/update-existing-projects
    version: 0.0.4-dev # jtb

    jobs:
      - jnk/update-existing-projects:
          version: '{version}'


- job-template:
    name: jnk/update-existing-projects

    project-id: jenkins-templated-builds
    project-type: freestyle
    display-name: 'Update Projects'
    disabled: true
    description: |
      <p>Update all jobs. </p>
      <p><code class="muted">JTB/{version} example/update-existing-projects</code></p>
    node: master
    concurrent: false

    logrotate:
      daysToKeep: -1
      numToKeep: -1

    triggers:
    - pollscm:
        cron: "*/1 * * * *"

    parameters:
    - string:
        name: Branch_Default
        description: |
          Set the branch for non-SCM-triggered builds.
        default: dev
    - bool:
        name: Override_Branches
        description: |
          Disregard other branches pointing at commit 
          of given Branch_Default.
        default: false

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
          def map = [:]

          // Pre-workspace, pre-scm vars. Previous workspace may still exist 
          // (but PWD default to root). Build only has a JOB_NAME and 
          // BUILD_ID/BUILD_NUMBER at this point
          try {
            if ("".equals(DEBUG)) {
              map['DEBUG'] = 'false'
            }
          } catch (MissingPropertyException e) {
            map['DEBUG'] = 'false'
          }
          map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
          map['scriptpath'] = JENKINS_HOME + "/bin"
          map['base'] = JOB_NAME

          // Return map with settings to inject
          return map

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/master'
        - 'origin/dev'
        - 'origin/test'

    wrappers:
    - timestamps
    - ansicolor:
        colormap: css


    builders:

    # Prepare package/version env from GIT
    - shell: |
        set +x
        . ./lib/util.sh
        . ./script/prepare-detached-git-version-env.sh .env-inject

    - generic-env-inject:
        inject-properties-file: .env-inject

    # Build .build-name file with semver compatible version string
    - shell: |
        set +x
        . ./lib/util.sh
        . ./script/prepare-jenkins-build-display-name.sh .build-name
        echo BUILD_DISPLAY_NAME=$BUILD_DISPLAY_NAME > .env-inject

    - build-name-from-file:
        path: .build-name

    - generic-env-inject:
        inject-properties-file: .env-inject

    # Start the actual build
    - shell: |
        mkdir -vp dist
        make dist

    # TODO: test all presets, and maybe other instances found in other projects.
    - shell: |
        . ./lib/util.sh
        jenkins-cli version

        jjb_subcmd=test

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


    publishers:

    # Set a nice RTF description. XXX: Only issue with the plugin(s) is they add
    # everything to the Job page too, which sometimes gets confusing.
    - raw:
        xml: |
          <org.korosoft.jenkins.plugin.rtp.RichTextPublisher plugin="rich-text-publisher-plugin@1.3">
            <stableText>
          
          h3. Latest build: ${ENV:BUILD_DISPLAY_NAME}

          - [Build Times|buildTimeTrend]

          ||Root Build Cause:|${ENV:ROOT_BUILD_CAUSE}|
          ||SCM Refs:|${ENV:SCM_REFS}|
          ||GIT Commit:|${ENV:GIT_COMMIT_ABBREV} (${ENV:GIT_COMMIT})|
          ||Build ID:|${ENV:BUILD_ID} |
          ||Build Tag:|${ENV:BUILD_TAG} |
          ||Build Meta:|${ENV:BUILD_META} |

          ----

            </stableText>
            <unstableText/>
            <failedText/>
            <unstableAsStable>true</unstableAsStable>
            <failedAsStable>true</failedAsStable>
            <parserName>Confluence</parserName>
          </org.korosoft.jenkins.plugin.rtp.RichTextPublisher> 

    # Set either matched console output lines, or fall back to fixed description. 
    # May seem a bit limited, but it does access env so no problem.
    - description-setter:
        description: |
          GIT: ${GIT_COMMIT_ABBREV}
#          regexp: ^.*Notice.*$

    - jtb-inline-tasks-parser:
        project-src: 'preset/update-existing-projects.yaml'

    # TODO: want to generate a changelog, but first move some things out of
    # there to main JTB job, and correct this one:
    # - root project is JTB, this is a subproject


# Id: jtb/0.0.4-dev
