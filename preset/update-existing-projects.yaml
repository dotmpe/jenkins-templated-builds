
# TODO: separate build for dev/master/... or some matrix thingie.
#   Current config with multiple scm of same repo seems to pick last scm and keep building for some reason.



- property:
    name: generic-env-inject
    properties:
    - inject:
        enabled: true
        keep-system-variables: true
        keep-build-variables: true
        override-build-parameters: true
        load-from-master: false
        # Inject properties
        properties-file: '{inject-properties-file}'
        properties-content: '{inject-properties-content}'
        # Sh script cannot update env, but can run other tasks before SCM runs
        script-file: '{env-script-file}'
        script-content: '{env-script-content}'
        # Groovy script can return map to update env
        groovy-content: '{inject-env-groovy-content}'

- scm:
    name: scm-jtb-branch

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/{branch}'
        local-branch: '{branch}'


- job:
    name: update-existing-projects

    project-type: freestyle
    display-name: 'Update Projects'
    disabled: false
    description: 'Update all jobs. '
    node: master
    concurrent: false

    project-id: jenkins-templated-builds

    triggers:
    - pollscm:
         cron: "*/1 * * * *"

    parameters:
    - string:
        name: branch_default
        description: Set the branch for non-SCM-triggered builds.
        default: dev

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
          def map = [:]

          // Pre-workspace, pre-scm vars. Previous workspace may still exist 
          // (but PWD default to root). Build only has a JOB_NAME and 
          // BUILD_ID/BUILD_NUMBER at this point
          try {
            if ("".equals(DEBUG)) {
              map['DEBUG'] = 'false'
            }
          } catch (MissingPropertyException e) {
            map['DEBUG'] = 'false'
          }
          map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
          map['scriptpath'] = JENKINS_HOME + "/bin"
          map['base'] = JOB_NAME
          map['brix_packages'] = '/opt/annex/brix-packages'

          // Return map with settings to inject
          return map

    scm:
    - scm-jtb-branch:
        branch: master
    - scm-jtb-branch:
        branch: dev

    wrappers:
    - timestamps
    - ansicolor:
        colormap: vga

    builders:
    - shell: |
        . ./util.sh

        echo build_package='JTB[update]' >> .env-inject
        echo build_version=0.0.1 >> .env-inject
        echo build_meta= >> .env-inject

        test -z "$BUILD_CAUSE_SCMTRIGGER" && {

          git checkout $branch_default
          echo branch=$branch_default >> .env-inject
          echo build_tag=-$BUILD_ID-$branch_default-manual >> .env-inject

        } || {
          branch_ref=$(git symbolic-ref HEAD || error "Must checkout named branch, no detached HEAD's" 1)
          branch=$(basename $branch_ref)

          echo branch=$branch >> .env-inject
          echo build_tag=-$BUILD_ID-$branch>> .env-inject
        }

        env

        echo $GIT_COMMIT
        echo $GIT_PREVIOUS_COMMIT
        echo $GIT_PREVIOUS_SUCCESSFUL_COMMIT
        echo $ROOT_BUILD_CAUSE
        echo $BUILD_CAUSE_MANUALTRIGGER
        echo $BUILD_DISPLAY_NAME

    - raw:
        xml: |
          <EnvInjectBuilder plugin="envinject@1.92.1">
            <info>
              <propertiesFilePath>.env-inject</propertiesFilePath>
              <propertiesContent></propertiesContent>
            </info>
          </EnvInjectBuilder>

    - raw:
        xml: |
          <org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater plugin="build-name-setter@1.5.1">
            <buildName></buildName>
            <macroTemplate>${build_version}${build_tag}${build_meta}</macroTemplate>
            <fromFile>false</fromFile>
            <fromMacro>true</fromMacro>
            <macroFirst>false</macroFirst>
          </org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater>

    - shell: |
        echo $BUILD_DISPLAY_NAME

    - shell: |
        mkdir -vp dist
        make dist

    - shell: |
        . ./util.sh

        jenkins-cli version

        jjb_subcmd=
        case "$branch" in dev ) jjb_subcmd=test ;; master ) jjb_subcmd=update ;; * ) error "Unknown branch $branch" 1 ;; esac

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


