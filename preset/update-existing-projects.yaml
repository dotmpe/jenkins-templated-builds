
# TODO: 
#

- property:
    name: generic-env-inject
    properties:
    - inject:
        enabled: true
        keep-system-variables: true
        keep-build-variables: true
        override-build-parameters: true
        load-from-master: false
        # Inject properties
        properties-file: '{inject-properties-file}'
        properties-content: '{inject-properties-content}'
        # Sh script cannot update env, but can run other tasks before SCM runs
        script-file: '{env-script-file}'
        script-content: '{env-script-content}'
        # Groovy script can return map to update env
        groovy-content: '{inject-env-groovy-content}'


- job:
    name: Jenkins/update-existing-projects

    project-type: freestyle
    display-name: 'Update Projects'
    disabled: false
    description: 'Update all jobs. '
    node: master
    concurrent: false

    logrotate:
      daysToKeep: -1
      numToKeep: 7

    project-id: jenkins-templated-builds

    triggers:
    - pollscm:
         cron: "*/1 * * * *"

    parameters:
    - string:
        name: Branch_Default
        description: Set the branch for non-SCM-triggered builds.
        default: dev
    - bool:
        name: Override_Branches
        description: Disregard other branches pointing at commit of given Branch_Default.
        default: false

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
          def map = [:]

          // Pre-workspace, pre-scm vars. Previous workspace may still exist 
          // (but PWD default to root). Build only has a JOB_NAME and 
          // BUILD_ID/BUILD_NUMBER at this point
          try {
            if ("".equals(DEBUG)) {
              map['DEBUG'] = 'false'
            }
          } catch (MissingPropertyException e) {
            map['DEBUG'] = 'false'
          }
          map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
          map['scriptpath'] = JENKINS_HOME + "/bin"
          map['base'] = JOB_NAME
          map['brix_packages'] = '/opt/annex/brix-packages'

          // Return map with settings to inject
          return map

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/master'
        - 'origin/dev'
        - 'origin/test'

    wrappers:
    - timestamps
    - ansicolor:
        # vga, gnome-terminal, xterm: white on black, may require userContent tweaks
        # css: black on white, generally readable with defaults
        colormap: css

    # Prepare package/version env from GIT
    builders:
    - shell: |
        set +x
        . ./util.sh
        . ./script/prepare-detached-git-version-env.sh .env-inject

    - raw:
        xml: |
          <EnvInjectBuilder plugin="envinject@1.92.1">
            <info>
              <propertiesFilePath>.env-inject</propertiesFilePath>
              <propertiesContent></propertiesContent>
            </info>
          </EnvInjectBuilder>

    # Build .build-name file with semver compatible version string
    - shell: |
        set +x
        . ./util.sh
        . ./script/prepare-jenkins-build-display-name.sh .build-name
        echo BUILD_DISPLAY_NAME=$BUILD_DISPLAY_NAME > .env-inject

    - raw:
        xml: |
          <org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater plugin="build-name-setter@1.5.1">
            <buildName>.build-name</buildName>
            <macroTemplate></macroTemplate>
            <fromFile>true</fromFile>
            <fromMacro>false</fromMacro>
            <macroFirst>false</macroFirst>
          </org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater>

    - raw:
        xml: |
          <EnvInjectBuilder plugin="envinject@1.92.1">
            <info>
              <propertiesFilePath>.env-inject</propertiesFilePath>
              <propertiesContent></propertiesContent>
            </info>
          </EnvInjectBuilder>

    # Build a little version environment report on the above (appended to the job and build pages)
    - shell: |
        set +x
        . ./util.sh

        log ENV
        env

    # Start the actual build
    - shell: |
        mkdir -vp dist
        make dist

    # TODO: test all presets, and maybe other instances found in other projects.
    - shell: |
        . ./util.sh
        jenkins-cli version

        jjb_subcmd=test

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


    publishers:

    # Set a nice RTF description. XXX: Only issue with the plugin(s) is they add
    # everything to the Job page too, which sometimes gets confusing.
    - raw:
        xml: |
          <org.korosoft.jenkins.plugin.rtp.RichTextPublisher plugin="rich-text-publisher-plugin@1.3">
            <stableText>
          
          h3. Latest build: ${ENV:BUILD_DISPLAY_NAME}

          ||Root Build Cause:|${ENV:ROOT_BUILD_CAUSE}|
          ||SCM Refs:|${ENV:SCM_REFS}|
          ||Build ID:|${ENV:BUILD_ID} |
          ||Build Tag:|${ENV:BUILD_TAG} |
          ||Build Meta:|${ENV:BUILD_META} |

          ----

            </stableText>
            <unstableText/>
            <failedText/>
            <unstableAsStable>true</unstableAsStable>
            <failedAsStable>true</failedAsStable>
            <parserName>Confluence</parserName>
          </org.korosoft.jenkins.plugin.rtp.RichTextPublisher> 

    # Set either matched console output lines, or fall back to fixed description. 
    # May seem a bit limited, but it does access env so no problem.
    - description-setter:
        description: |
          GIT: ${GIT_COMMIT_ABBREV}
#          regexp: ^.*Notice.*$

    - jtb-inline-tasks-parser:
        project-src: '*'

    # TODO: want to generate a changelog, but first move some things out of
    # there to main JTB job.

