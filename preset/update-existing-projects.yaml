

- property:
    name: generic-env-inject
    properties:
    - inject:
        enabled: true
        keep-system-variables: true
        keep-build-variables: true
        override-build-parameters: true
        load-from-master: false
        # Inject properties
        properties-file: '{inject-properties-file}'
        properties-content: '{inject-properties-content}'
        # Sh script cannot update env, but can run other tasks before SCM runs
        script-file: '{env-script-file}'
        script-content: '{env-script-content}'
        # Groovy script can return map to update env
        groovy-content: '{inject-env-groovy-content}'


- job:
    name: update-existing-projects

    project-type: freestyle
    display-name: 'Update Projects'
    disabled: false
    description: 'Update all jobs. '
    node: master
    concurrent: false

    project-id: jenkins-templated-builds

    triggers:
    - pollscm: "*/1 * * * *"

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
           // Pre-workspace, pre-scm vars. Previous workspace may still exist.
           // Build only has a JOB_NAME at this point
           def map = [:]
           try {
             if ("".equals(DEBUG)) {
               map['DEBUG'] = 'false'
             }
           } catch (MissingPropertyException e) {
             map['DEBUG'] = 'false'
           }
           map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
           map['scriptpath'] = JENKINS_HOME + "/bin"
           map['base'] = JOB_NAME
           map['brix_packages'] = '/opt/annex/brix-packages'

           map['pre_scm_JOB_NAME'] = JOB_NAME
           map['pre_scm_BUILD_ID'] = BUILD_ID
           map['pre_scm_BUILD_NUMBER'] = BUILD_NUMBER

           return map

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/dev'
        local-branch: dev
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/master'
        local-branch: master

    wrappers:
    - timestamps
    - ansicolor:
        colormap: vga

    builders:
    - shell: |
        . ./util.sh

        env

        branch_ref=$(git symbolic-ref HEAD || error "Must checkout named branch, no detached HEAD's" 1)
        echo branch=$(basename $branch_ref) >> .env-inject
        echo project={project-id} >> .env-inject
        echo version=1.2.3 >> .env-inject

    - raw:
        xml: |
          <EnvInjectBuilder plugin="envinject@1.92.1">
            <info>
              <propertiesFilePath>.env-inject</propertiesFilePath>
              <propertiesContent></propertiesContent>
            </info>
          </EnvInjectBuilder>

    - raw:
        xml: |
          <org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater plugin="build-name-setter@1.5.1">
            <buildName></buildName>
            <macroTemplate>${project}:${JOB_NAME}/${version}-#${BUILD_NUMBER}-${branch}</macroTemplate>
            <fromFile>true</fromFile>
            <fromMacro>false</fromMacro>
            <macroFirst>false</macroFirst>
          </org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater>

    - shell: |
        . ./util.sh

        mkdir -vp dist
        make dist

    - shell: |
        . ./util.sh

        jenkins-cli version

        jjb_subcmd=
        case "$branch" in dev ) jjb_subcmd=test ;; master ) jjb_subcmd=update ;; * ) error "Unknown branch $branch" 1 ;; esac

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


