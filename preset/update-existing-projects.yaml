
# TODO: 
#


- property:
    name: generic-env-inject
    properties:
    - inject:
        enabled: true
        keep-system-variables: true
        keep-build-variables: true
        override-build-parameters: true
        load-from-master: false
        # Inject properties
        properties-file: '{inject-properties-file}'
        properties-content: '{inject-properties-content}'
        # Sh script cannot update env, but can run other tasks before SCM runs
        script-file: '{env-script-file}'
        script-content: '{env-script-content}'
        # Groovy script can return map to update env
        groovy-content: '{inject-env-groovy-content}'


- job:
    name: update-existing-projects

    project-type: freestyle
    display-name: 'Update Projects'
    disabled: false
    description: 'Update all jobs. '
    node: master
    concurrent: false

    logrotate:
      daysToKeep: -1
      numToKeep: 7

    project-id: jenkins-templated-builds

    triggers:
    - pollscm:
         cron: "*/1 * * * *"

    parameters:
    - string:
        name: Branch_Default
        description: Set the branch for non-SCM-triggered builds.
        default: dev
    - bool:
        name: Override_Branches
        description: Disregard other branches pointing at commit of given Branch_Default.
        default: false

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
          def map = [:]

          // Pre-workspace, pre-scm vars. Previous workspace may still exist 
          // (but PWD default to root). Build only has a JOB_NAME and 
          // BUILD_ID/BUILD_NUMBER at this point
          try {
            if ("".equals(DEBUG)) {
              map['DEBUG'] = 'false'
            }
          } catch (MissingPropertyException e) {
            map['DEBUG'] = 'false'
          }
          map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
          map['scriptpath'] = JENKINS_HOME + "/bin"
          map['base'] = JOB_NAME
          map['brix_packages'] = '/opt/annex/brix-packages'

          // Return map with settings to inject
          return map

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/master'
        - 'origin/dev'
        - 'origin/test'

    wrappers:
    - timestamps
    - ansicolor:
        # vga, gnome-terminal, xterm: white on black, may require userContent tweaks
        # css: black on white, generally readable with defaults
        colormap: css

    builders:
    - shell: |
        . ./util.sh

        debug ENV
        env

        debug GIT 
        echo $GIT_COMMIT
        echo $GIT_PREVIOUS_COMMIT
        echo $GIT_PREVIOUS_SUCCESSFUL_COMMIT
        echo $ROOT_BUILD_CAUSE
        echo $BUILD_CAUSE_MANUALTRIGGER
        echo $BUILD_DISPLAY_NAME

    builders:
    - shell: |
        set +x
        . ./util.sh


        note "Preparing env from detached GIT"

        git describe --always

        CHECKOUT=$(git log -n 1 --pretty="format:%H")
        REFS=
        BRANCHES=

        git show-ref | grep -F "$CHECKOUT" | while read sha1 ref
        do
          remote=$(basename $(dirname $ref))
          branch=$(basename $ref)
          info $remote/$branch
          echo $remote/$branch >>.refs
          echo $branch >>.branches
        done

        REFS="$(sort -u .refs)"
        BRANCHES="$(sort -u .branches)"
        rm .refs .branches

        BUILD_ID=$JOB_NAME
        BUILD_ID=JTB-Upd
        BUILD_VERSION=$(grep Version ReadMe.rst | sed 's/[^0-9\.]//g')

        test -z "$BUILD_CAUSE_SCMTRIGGER" && {

          git checkout $Branch_Default

          trueish "$Override_Branches" && {
            # Override branches
            BRANCHES="$Branch_Default"
          } || {
            BRANCHES="$BRANCHES $Branch_Default"
          }

          BUILD_TAG="build $BUILD_NUMBER manual"

        } || {

          BUILD_TAG="build $BUILD_NUMBER"
        }

        BUILD_META="$BUILD_META $(echo $BRANCHES | tr " " "\n" | sort -u | tr "\n" " ")"

        note "Generating Env-Inject properties"
        for var in CHECKOUT BRANCHES BUILD_ID BUILD_VERSION BUILD_TAG BUILD_META
        do
          info "exporting $var $(eval echo \$$var)"
          echo "$var = $(eval echo \$$var | sed 's/[\\ :\\,-]/\\&/')" >> .env-inject
        done

        echo "Approve : 1" >> .env-inject

    - raw:
        xml: |
          <EnvInjectBuilder plugin="envinject@1.92.1">
            <info>
              <propertiesFilePath>.env-inject</propertiesFilePath>
              <propertiesContent></propertiesContent>
            </info>
          </EnvInjectBuilder>

    # Build .build-name file with semver compatible version string
    - shell: |
        set +x
        . ./util.sh

        note "Generating Build-Name file"

        info "Current Build-Name: $BUILD_DISPLAY_NAME"

        #BUILD_DISPLAY_NAME="$BUILD_ID/$BUILD_VERSION"
        BUILD_DISPLAY_NAME="$BUILD_VERSION"

        echo "BUILD_TAG=$BUILD_TAG"
        echo "BUILD_META=$BUILD_META"
        echo "BRANCHES=$BRANCHES"

        test -z "$BUILD_TAG" \
          || BUILD_DISPLAY_NAME="$BUILD_DISPLAY_NAME-$(echo $BUILD_TAG | sed 's/[^a-zA-Z0-9]\{1,\}/-/g')"
        test -z "$BUILD_META" \
          || BUILD_DISPLAY_NAME="$BUILD_DISPLAY_NAME+$(echo $BUILD_META | sed 's/[^a-zA-Z0-9]\{1,\}/+/g')"

        info "New Build-Name: $BUILD_DISPLAY_NAME"
        echo $BUILD_DISPLAY_NAME > .build-name
        # could reinject, but probably does little if anything
        #echo BUILD_DISPLAY_NAME=$BUILD_DISPLAY_NAME >> .env-inject

    - raw:
        xml: |
          <org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater plugin="build-name-setter@1.5.1">
            <buildName>.build-name</buildName>
            <macroTemplate></macroTemplate>
            <fromFile>true</fromFile>
            <fromMacro>false</fromMacro>
            <macroFirst>false</macroFirst>
          </org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater>

    - shell: |
        mkdir -vp dist
        make dist

    - shell: |
        . ./util.sh

        jenkins-cli version

        jjb_subcmd=test
        #case "$branch" in dev ) jjb_subcmd=test ;; master ) jjb_subcmd=update ;; * ) error "Unknown branch $branch" 1 ;; esac

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


