

- property:
    name: generic-env-inject
    properties:
    - inject:
        enabled: true
        keep-system-variables: true
        keep-build-variables: true
        override-build-parameters: true
        load-from-master: false
        # Inject properties
        properties-file: '{inject-properties-file}'
        properties-content: '{inject-properties-content}'
        # Sh script cannot update env, but can run other tasks before SCM runs
        script-file: '{env-script-file}'
        script-content: '{env-script-content}'
        # Groovy script can return map to update env
        groovy-content: '{inject-env-groovy-content}'


- job:
    name: update-existing-projects

    project-type: freestyle
    display-name: 'Update Projects'
    disabled: false
    description: 'Update all jobs. '
    node: master
    concurrent: false

    triggers:
    - pollscm: "*/1 * * * *"

    wrappers:
    - build-name: 'xxx-${{BUILD_ID}}-$branch'

    properties:
    - generic-env-inject:
        inject-properties-file: ''
        inject-properties-content: ''
        env-script-file: ''
        env-script-content: ''
        inject-env-groovy-content: |
              def map = [:]
              try {
                if ("".equals(DEBUG)) {
                  map['DEBUG'] = 'false'
                }
              } catch (MissingPropertyException e) {
                map['DEBUG'] = 'false'
              }
              map['Redis_Key'] = "jenkins:jobs:"+JOB_NAME
              map['scriptpath'] = JENKINS_HOME + "/bin"
              map['base'] = JOB_NAME
              map['brix_packages'] = '/opt/annex/brix-packages'
              try {
                // XXX: this only works with existing workspace, SCM hasnt run yet
                String branch_ref = "git symbolic-ref HEAD" .execute().text
                map['branch'] = "basename ${branch_ref}" .execute().text
              } catch (MissingPropertyException e) {
                println "Must checkout named branch, no detached HEAD's"
                assert false
              }
              return map

    scm:
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/dev'
        local-branch: dev
    - git:
        url: https://github.com/dotmpe/jenkins-templated-builds.git
        wipe-workspace: true
        prune: true
        skip-tag: true
        branches:
        - 'origin/master'
        local-branch: master

    wrappers:
    - timestamps
    - ansicolor:
        colormap: vga

    builders:
    - shell: |
        . ./util.sh

        env
        exit 0

        test -n "$branch" || error "Check env-inject"
        branchref=$(git symbolic-ref HEAD || error "Must checkout named branch, no detached HEAD's" 1)

        jenkins-cli version

        local jjb_subcmd=
        case "$branch" in dev ) jjb_subcmd=test ;; master ) jjb_subcmd=update ;; * ) error "Unknown branch $branch" 1 ;; esac

        jenkins-cli list-jobs | while read jobname
        do
          test -e preset/$jobname.yaml || continue && {
            note "jenkins-jobs $jjb_subcmd $jobname"
            jenkins-jobs $jjb_subcmd preset/$jobname.yaml:dist/base.yaml
          }
        done


