# # The initial base file, split this up later.
#

# global defaults is special only? why not use something else. filename or 
# argument or something.
# XXX: can have only one defaults[name=global]
- defaults:
    name: base

    # Job template vars
    project-title: 'Job Template Builder'
    build-summary-image: /userContent/jenkins-build-templates.png
    disabled: true
    concurrent: true
    htmlDescription:
    restrict-node:

    ## Parameter vars
    # none

    ## Trigger vars
    # none

    ## Builder vars
    # none

    ## Publisher vars
    # jtb-checkstyle
    # jtb-inline-tasks-parser
    project-src:
    # jtb-std-log-parser
    log-parser-rules: $JENKINS_HOME/log-parser-rules.txt
    unstable-on-warning: true
    fail-on-error: false
    # jtb-std-email
    email-every-unstable: false
    email-individuals: false
    email-to:
    # jenkins-html
    report-files:
    # jenkins-summary
    # jtb-junit

    ## Wrapper vars
    # none

    jjb-files:

    publish-on-error: true

    git-browser: auto
    git-browser-url:
    credentials-id:

    git-recursive-init: false

    require-tap-plan: false


### JJB Action macros for job parts


## Builder macros

- builder:
    name: builder-jtb-0
    builders:
    - shell: 'jenkins-jobs test {jjb-files}'


- builder:
    name: builder-jtb-1
    builders:
    - shell: 'files={jjb-files} ./update.sh'
    #- shell: 'jtb ${jtb-file}'


- builder:
    name: builder-jtb-2
    builders:
    - shell: 'echo version={version}'


- builder:
    name: jtb-travis-builder-0
    builders:
    - raw:
        xml: |

          <ruby-proxy-object>
            <ruby-object ruby-class="Jenkins::Tasks::BuilderProxy" pluginid="travis-yml">
              <object ruby-class="TravisYmlBuilder" pluginid="travis-yml"/>
              <pluginid pluginid="travis-yml" ruby-class="String">travis-yml</pluginid>
            </ruby-object>
          </ruby-proxy-object>


- builder:
    name: jtb-automake-builder-0
    builders:
    - shell: |
        for x in configure configure.sh; do test -e ./$x && ./$x || echo -n; done
    - shell: |
        test -e Makefile && {{ make && make install; }} || echo 'Warning: Nothing to do'


## Publisher macros


- publisher:
    name: jtb-checkstyle
    publishers:
    - checkstyle:
        pattern: 'build/checkstyle-result.xml'


- publisher:
    name: jtb-inline-tasks-parser
    publishers:
    - raw:
        xml: |

          <hudson.plugins.tasks.TasksPublisher plugin="tasks@4.45">
            <healthy/>
            <unHealthy/>
            <thresholdLimit>low</thresholdLimit>
            <pluginName>[TASKS]</pluginName>
            <defaultEncoding/>
            <canRunOnFailed>true</canRunOnFailed>
            <usePreviousBuildAsReference>false</usePreviousBuildAsReference>
            <useStableBuildAsReference>false</useStableBuildAsReference>
            <useDeltaValues>false</useDeltaValues>
            <thresholds plugin="analysis-core@1.72">
              <unstableTotalAll/>
              <unstableTotalHigh/>
              <unstableTotalNormal/>
              <unstableTotalLow/>
              <failedTotalAll/>
              <failedTotalHigh/>
              <failedTotalNormal/>
              <failedTotalLow/>
            </thresholds>
            <shouldDetectModules>false</shouldDetectModules>
            <dontComputeNew>true</dontComputeNew>
            <doNotResolveRelativePaths>false</doNotResolveRelativePaths>
            <high>FIXME</high>
            <normal>TODO</normal>
            <low>XXX</low>
            <ignoreCase>false</ignoreCase>
            <asRegexp>false</asRegexp>
            <pattern>{project-src}</pattern>
            <excludePattern/>
          </hudson.plugins.tasks.TasksPublisher>

#     - task-scanner:
#         pattern: '{project-src}'
#         health-threshold: low
#         can-run-on-failed: true
#         use-stable-build-as-reference: false
#         use-delta-values: false
#         should-detect-modules: false
#         do-not-resolve-relative-paths: true
#         dont-compute-new: true


- publisher:
    name: jtb-std-log-parser
    publishers:
    # hudson.plugins.logparser.LogParserPublisher
    - logparser:
        parse-rules: '{log-parser-rules}'
        unstable-on-warning: '{unstable-on-warning}'
        fail-on-error: '{fail-on-error}'

- publisher:
    name: jtb-std-warnings
    publishers:
    - raw:
        xml: |
          <hudson.plugins.analysis.collector.AnalysisPublisher plugin="analysis-collector@1.43">
            <healthy/>
            <unHealthy/>
            <thresholdLimit>low</thresholdLimit>
            <pluginName>[ANALYSIS-COLLECTOR]</pluginName>
            <defaultEncoding/>
            <canRunOnFailed>{publish-on-error}</canRunOnFailed>
            <usePreviousBuildAsReference>false</usePreviousBuildAsReference>
            <useStableBuildAsReference>false</useStableBuildAsReference>
            <useDeltaValues>false</useDeltaValues>
            <thresholds plugin="analysis-core@1.72">
              <unstableTotalAll/>
              <unstableTotalHigh/>
              <unstableTotalNormal/>
              <unstableTotalLow/>
              <failedTotalAll/>
              <failedTotalHigh/>
              <failedTotalNormal/>
              <failedTotalLow/>
            </thresholds>
            <shouldDetectModules>false</shouldDetectModules>
            <dontComputeNew>true</dontComputeNew>
            <doNotResolveRelativePaths>true</doNotResolveRelativePaths>
            <isCheckStyleDeactivated>true</isCheckStyleDeactivated>
            <isDryDeactivated>true</isDryDeactivated>
            <isFindBugsDeactivated>true</isFindBugsDeactivated>
            <isPmdDeactivated>true</isPmdDeactivated>
            <isOpenTasksDeactivated>false</isOpenTasksDeactivated>
            <isWarningsDeactivated>false</isWarningsDeactivated>
          </hudson.plugins.analysis.collector.AnalysisPublisher>


- publisher:
    name: jtb-std-email
    publishers:
    # use hudson.tasks.Mailer, see also hudson.maven.reporters.Mailer
    - email:
        notify-every-unstable-build: '{email-every-unstable}'
        send-to-individuals: '{email-individuals}'
        recipients: '{email-to}'


- publisher:
    name: jenkins-html
    publishers:
    - html-publisher:
        name: 'JTB Build Report'
        dir: build/ci-html-report/
        files: '{report-files}'
        keep-all: true
        allow-missing: true


- publisher:
    name: jenkins-summary
    publishers:
    - xml-summary:
        files: 'test_summary.xml'


- publisher:
    name: jtb-junit
    publishers:
    - junit:
        results: 'build/logs/*.xml'
        keep-long-stdio: true
        test-stability: false
        claim-build: false


### YAML aliases: generic job parts


- restrict_node: &restrict_node
    name: restrict_node
    node: '{restrict-node}'


- description: &description
    name: description
    description: |
        <div id="jtb-ci-description" class="well">
          <div class="row">

            <div class="col-md-3" style="width:15%"><img width="100%" src="{build-summary-image}" /></div>
            <div class="col-md-5" style="width:40%"> {htmlDescription} </div> 
            <div class="col-md-4" style="width:45%">

              <table class="table table-condensed">

                <tr>
                  <th> Vendor # branch </th> <td> <code class="muted">{vendor-repo}</code>:<code>{vendor-path}#{branch}</code> </td>
                </tr> <tr>
                  <th> Project source </th> <td> {project-src} </td>
                </tr> <tr>
                  <th> E-mail developers </th> <td> {email-individuals} </td>
                </tr> <tr>
                  <th> Additional Subscribers </th> <td> {email-to} </td>
                </tr>

              </table>

            </div> 
          </div>
        </div>

        <div class="alert alert-info center" role="alert">
          <span class="glyphicon glyphicon-exclamation-sign"
              aria-hidden="true"></span>
          <div> This is a JJB managed configuration. </div>
        </div> 


## YAML aliases: Standard GIT SCM parts


- git_co: &git_co
    name: git_co

    url: '{git-url}'
    submodule:
      recursive: '{git-recursive-init}'
    skip-tag: true
    wipe-workspace: false
    prune: true
    skip-tag: true
    wipe-workspace: false
    prune: true
    credentials-id: '{credentials-id}'
    browser: '{git-browser}'
    browser-url: '{git-browser-url}'


- git_branchless_co: &git_branchless_co
    name: git_branchless_co

    <<: *git_co
    branches:
    - '{branch}'


# FIXME: git-branch-co stopped working at VS1?
- git_branch_co: &git_branch_co
    name: git_branch_co

    <<: *git_co
    branches:
    - 'origin/{branch}'
    local-branch: '{branch}'


- std_git_co: &std_git_co
    name: std_git_co

    scm:
    - git:
        <<: *git_co


- vnd_git_co: &vnd_git_co
    name: 'vnd_git_co'

    scm:
    - git:
        <<: *git_co
        url: '{vendor-root}{vendor-path}.git'


- gh_shared_parts: &gh_shared_parts
    name: gh_shared_parts

    properties:
    - raw:
        xml: |
          <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.13.2">
            <projectUrl>https://github.com/{vendor-path}/</projectUrl>
          </com.coravy.hudson.plugins.github.GithubProjectProperty>

#    publishers:
# Join trigger can only group projects (upstream?),
# ant do parametrized build triggerss once group done as a whole
#    - join-trigger:
#        even-if-unstable: true
#        projects: '{obj:upstream-group}'
#        even-if-unstable: '{downstream-on-unstable}'
#        publishers:
#        - trigger:
#            project: xxx
#            threshold: unstable
#        publishers: '{obj:downstream}'

# Downstream is kind of backwards. Natural for build system to keep downstream
# with upstream config. For real life projects not so much. Want
# to append downstream projects later to existing jobs?
    #- downstream-ext:
    #    projects: '{obj:downstream}'
    #    criteria: sucess
    #    only-on-scm-change: false
    #    only-on-local-scm-change: false
    #    comparison: equal-or-over
    #    #condition: 


- private_gh_co: &private_gh_co
    name: 'private_gh_co'

    <<: *gh_shared_parts
    git-browser: githubweb
    git-browser-url: 'https://github.com/'
    vendor-root: 'git@github.com:'
    scm:
    - git:
        <<: *git_branchless_co
        # git@github.com:<vendor-path>.mpe.git
        url: '{vendor-root}{vendor-path}.git'
        credentials-id: '{credentials-id}'


- std_gh_co: &std_gh_co
    name: 'std_gh_co'

    <<: *gh_shared_parts
    git-browser: githubweb
    git-browser-url: 'https://github.com/'
    vendor-root: 'https://github.com/'
    scm:
    - git:
        <<: *git_branchless_co
        # https://github.com/<vendor-path>.git
        url: '{vendor-root}{vendor-path}.git'



# YAML aliases: other scm related parts


- gh_trigger: &gh_trigger
    name: gh_trigger

    triggers:
    - github


- std_pollscm: &std_pollscm
    name: 'std_pollscm'

    pollscm: "*/1 * * * *"


- std_scm_trigger: &std_scm_trigger
    name: 'std_scm_trigger'

    triggers:
    - <<: *std_pollscm


# YAML aliases: Build wrapper part


- std_console_output_job: &std_console_output_job
    name: 'std_console_output_job'

    wrappers:
    - timestamps
    - ansicolor:
        colormap: vga


## YAML aliases: Build publisher parts

- std_analysis_report: &std_analysis_report
    name: std_analysis_report

    raw:
        xml: |
          <hudson.plugins.analysis.collector.AnalysisPublisher>
            <healthy></healthy>
            <unHealthy></unHealthy>
            <thresholdLimit>low</thresholdLimit>
            <pluginName>[ANALYSIS-COLLECTOR] </pluginName>
            <defaultEncoding></defaultEncoding>
            <canRunOnFailed>false</canRunOnFailed>
            <usePreviousBuildAsReference>false</usePreviousBuildAsReference>
            <useStableBuildAsReference>false</useStableBuildAsReference>
            <useDeltaValues>false</useDeltaValues>
            <thresholds>
              <unstableTotalAll></unstableTotalAll>
              <unstableTotalHigh></unstableTotalHigh>
              <unstableTotalNormal></unstableTotalNormal>
              <unstableTotalLow></unstableTotalLow>
              <failedTotalAll></failedTotalAll>
              <failedTotalHigh></failedTotalHigh>
              <failedTotalNormal></failedTotalNormal>
              <failedTotalLow></failedTotalLow>
            </thresholds>
            <shouldDetectModules>false</shouldDetectModules>
            <dontComputeNew>true</dontComputeNew>
            <doNotResolveRelativePaths>true</doNotResolveRelativePaths>
            <isCheckStyleDeactivated>false</isCheckStyleDeactivated>
            <isDryDeactivated>true</isDryDeactivated>
            <isFindBugsDeactivated>true</isFindBugsDeactivated>
            <isPmdDeactivated>true</isPmdDeactivated>
            <isOpenTasksDeactivated>false</isOpenTasksDeactivated>
            <isWarningsDeactivated>true</isWarningsDeactivated>
          </hudson.plugins.analysis.collector.AnalysisPublisher>


- std_email_publisher: &std_email_publisher
    name: std_email_publisher
    jtb-std-email:
        email-every-unstable: '{email-every-unstable}'
        email-individuals: '{email-individuals}'
        email-to: '{email-to}'


- std_log_parser: &std_log_parser
    name: std_log_parser
    jtb-std-log-parser:
        log-parser-rules: '{log-parser-rules}'
        unstable-on-warning: '{unstable-on-warning}'
        fail-on-error: '{fail-on-error}'


- std_tasks_parser: &std_tasks_parser
    name: std_tasks_parser
    jtb-inline-tasks-parser:
        project-src: '{project-src}'



### Some more JJB Action macros

## SCM macro

# FIXME: test this later, using yaml alias for now
- scm:
    name: 'scm-github-0'

    <<: *std_gh_co


### More complex YAML aliases: composite job types

- std_freestyle_job: &std_freestyle_job
    name: std_freestyle_job

    defaults: base
    project-type: freestyle
    display-name: '{title}'
    <<: *description
    disabled: '{obj:disabled}'
    concurrent: '{obj:concurrent}'
    <<: *restrict_node
    <<: *std_console_output_job

    publishers:
    - <<: *std_email_publisher
    - <<: *std_log_parser
    - <<: *std_tasks_parser
    - jtb-std-warnings:
        publish-on-error: '{publish-on-error}'


- private_gh_job: &private_gh_job
    name: private_gh_job
    <<: *std_freestyle_job
    <<: *private_gh_co


- gh_job: &gh_job
    name: gh_job
    <<: *std_freestyle_job
    <<: *std_gh_co

    #<<: *gh_co
# FIXME: test this later, using yaml alias for now
#    scm:
#    - 'scm-github-0':
#vendor-path: '{vendor-path}'
#    branch: '{branch}'



### At last, JJB templates


- job-template:
    name: '{name}-base-0'
    <<: *std_freestyle_job

    builders: '{obj:builders}'


- job-template:
    name: '{name}-jtb-0'
    <<: *gh_job

    parameters:
    - bool:
        name: JJB_Dry_Run
        default: true
    - choice:
        name: JJB_Files
        choices:
        - jtb.yaml:tpl/base.yaml

    builders:
    - builder-jtb-0:
        jjb-files: '$JJB_Files'


- job-template:
    name: '{name}-jtb-1'
    <<: *std_freestyle_job

    parameters:
    - choice:
        name: JTB_File
        choices:
        - jtb.yml
        - jtb.yaml
        - .jtb.yml
        - .jtb.yaml

    builders:
    - builder-jtb-1:
        jtb-file: '$JTB_File'


- job-template:
    name: '{name}-jtb-2'
    <<: *std_freestyle_job

    builders:
    - builder-jtb-2


# Provision and start, then stop a docker container
# Requires a global choice list definition 'Docker_Cloud_Name_List'.
# TODO: Not sure how to use the create/start exec commands in jenkins.
- job-template:
    name: '{name}-docker-0'
    <<: *std_freestyle_job

    parameters:
    - string:
        name: Docker_Image
        default: evarga/jenkins-slave
    - string:
        name: Docker_CID
        default: jenkins-docker-$JOB_NAME-$BUILD_NUMBER

    builders:
    - raw:
        xml: |
          <org.jenkinsci.plugins.dockerbuildstep.DockerBuilder plugin="docker-build-step@1.30">
            <dockerCmd class="org.jenkinsci.plugins.dockerbuildstep.cmd.CreateContainerCommand">
              <image>$Docker_Image</image>
              <command/>
              <hostName/>
              <containerName>$Docker_CID</containerName>
              <envVars/>
              <links/>
              <exposedPorts/>
              <cpuShares/>
              <memoryLimit/>
            </dockerCmd>
          </org.jenkinsci.plugins.dockerbuildstep.DockerBuilder>

#    - raw:
#        xml: |
#          <org.jenkinsci.plugins.dockerbuildstep.DockerBuilder plugin="docker-build-step@1.30">
#            <dockerCmd class="org.jenkinsci.plugins.dockerbuildstep.cmd.KillCommand">
#              <containerIds>$Docker_CID</containerIds>
#            </dockerCmd>
#          </org.jenkinsci.plugins.dockerbuildstep.DockerBuilder>
#
#    - raw:
#        xml: |
#          <org.jenkinsci.plugins.dockerbuildstep.DockerBuilder plugin="docker-build-step@1.30">
#            <dockerCmd class="org.jenkinsci.plugins.dockerbuildstep.cmd.RemoveCommand">
#              <containerIds>$Docker_CID</containerIds>
#              <ignoreIfNotFound>false</ignoreIfNotFound>
#              <removeVolumes>false</removeVolumes>
#            </dockerCmd>
#          </org.jenkinsci.plugins.dockerbuildstep.DockerBuilder>



# These I cannot get to work as expected
- job-template:
    name: '{name}-docker-1'
    project-type: freestyle
    <<: *std_console_output_job

    display-name: '{title}'
    disabled: '{obj:disabled}'
    <<: *description


    parameters:
    - string:
        name: Docker_Image
        default: evarga/jenkins-slave
    - string:
        name: Docker_CID
        default: jenkins-docker-$JOB_NAME-$BUILD_NUMBER
    - raw:
        xml: |
          <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.3.2">
            <name>Docker_Cloud_Name</name>
            <description/>
            <editable>false</editable>
            <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.GlobalTextareaChoiceListProvider">
              <name>Docker_Cloud_Name_List</name>
            </choiceListProvider>
          </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>


    builders:
    - shell: |
        echo Docker_Cloud_Name=$Docker_Cloud_Name
        echo Docker_Image=$Docker_Image
        echo Docker_CID=$Docker_CID
    - raw:
        xml: |
          <com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl plugin="docker-plugin@0.12.1">
            <option class="com.nirima.jenkins.plugins.docker.builder.DockerBuilderControlOptionRun">
              <cloudName>$Docker_Cloud_Name</cloudName>
              <image>$Docker_Image</image>
              <dnsString/>
              <dockerCommand/>
              <volumesString/>
              <volumesFrom/>
              <environmentsString/>
              <lxcConfString/>
              <privileged>false</privileged>
              <tty>false</tty>
              <hostname/>
              <bindPorts/>
              <bindAllPorts>false</bindAllPorts>
              <macAddress/>
            </option>
          </com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl>

    - raw:
        xml: |
          <com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl plugin="docker-plugin@0.12.1">
            <option class="com.nirima.jenkins.plugins.docker.builder.DockerBuilderControlOptionProvisionAndStart">
              <cloudName>$Docker_Cloud_Name</cloudName>
              <templateId>$Docker_Image</templateId>
            </option>
          </com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl>

#    - raw:
#        xml: |
#          <com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl plugin="docker-plugin@0.12.1">
#            <option class="com.nirima.jenkins.plugins.docker.builder.DockerBuilderControlOptionStop">
#              <cloudName>$Docker_Cloud_Name</cloudName>
#              <containerId>$Docker_CID</containerId>
#              <remove>true</remove>
#            </option>
#          </com.nirima.jenkins.plugins.docker.builder.DockerBuilderControl>

    publishers:
    - jtb-inline-tasks-parser
    - <<: *std_log_parser


## Github builds (work in progress, untested)


- job-template:
    name: '{name}-gh-automake'
    <<: *std_freestyle_job

    scm:
    - 'scm-{vendor-repo}-0':
        vendor-path: '{vendor-path}'
        branch: '{branch}'
        credentials-id: '{credentials-id}'

    triggers:
    - github

    builders:
    - jtb-automake-builder-0


- job-template:
    name: '{name}-gh'
    <<: *restrict_node
    <<: *gh_job
    <<: *gh_trigger

    builders: '{obj:builders}'


## Travis builds (work in progress, testing)


# Jobs for github, public and private

- job-template:
    name: '{name}-gh-travis'
    <<: *restrict_node
    # NOTE: this would only work with a public server
    <<: *gh_trigger
    <<: *gh_job

    builders:
    - jtb-travis-builder-0

- job-template:
    name: '{name}-local-gh-travis'
    <<: *restrict_node
    <<: *std_scm_trigger
    <<: *private_gh_job

    builders:
    - jtb-travis-builder-0


## Work in JJB builder

- job-template:
    name: '{name}-jjb-local'
    <<: *std_freestyle_job

    builders: '{obj:builders}'


## Work in progress JTB builder

- job-template:
    name: '{name}-jtb-install-local'
    <<: *std_freestyle_job

    builders: '{obj:builders}'


## Work in progress free-style GIT checkout build

- job-template:
    name: '{name}-free-git'
    <<: *std_freestyle_job
    <<: *std_git_co

    builders: '{obj:builders}'


# Id: jtb/0.0.2-test tpl/base.yaml
